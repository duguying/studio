// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.14.0
// source: performance.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// cmd 1
type PerformanceMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      uint64                           `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Mem            *PerformanceMonitor_Memory       `protobuf:"bytes,1,opt,name=mem,proto3" json:"mem,omitempty"`
	Cpu            *PerformanceMonitor_Cpu          `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Load           *PerformanceMonitor_Load         `protobuf:"bytes,4,opt,name=load,proto3" json:"load,omitempty"`
	Uptime         float64                          `protobuf:"fixed64,5,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Cpulist        []*PerformanceMonitor_Cpu        `protobuf:"bytes,6,rep,name=cpulist,proto3" json:"cpulist,omitempty"`
	FileSystemList []*PerformanceMonitor_FileSystem `protobuf:"bytes,7,rep,name=file_system_list,json=fileSystemList,proto3" json:"file_system_list,omitempty"`
	ProcessList    []*PerformanceMonitor_Process    `protobuf:"bytes,8,rep,name=process_list,json=processList,proto3" json:"process_list,omitempty"`
	Nets           []*PerformanceMonitor_NetWork    `protobuf:"bytes,9,rep,name=nets,proto3" json:"nets,omitempty"`
	Os             string                           `protobuf:"bytes,10,opt,name=os,proto3" json:"os,omitempty"`             // 系统名称
	Hostname       string                           `protobuf:"bytes,11,opt,name=hostname,proto3" json:"hostname,omitempty"` // 主机名称
	Arch           string                           `protobuf:"bytes,12,opt,name=arch,proto3" json:"arch,omitempty"`         // 架构
}

func (x *PerformanceMonitor) Reset() {
	*x = PerformanceMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_performance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMonitor) ProtoMessage() {}

func (x *PerformanceMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMonitor.ProtoReflect.Descriptor instead.
func (*PerformanceMonitor) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0}
}

func (x *PerformanceMonitor) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PerformanceMonitor) GetMem() *PerformanceMonitor_Memory {
	if x != nil {
		return x.Mem
	}
	return nil
}

func (x *PerformanceMonitor) GetCpu() *PerformanceMonitor_Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *PerformanceMonitor) GetLoad() *PerformanceMonitor_Load {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *PerformanceMonitor) GetUptime() float64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *PerformanceMonitor) GetCpulist() []*PerformanceMonitor_Cpu {
	if x != nil {
		return x.Cpulist
	}
	return nil
}

func (x *PerformanceMonitor) GetFileSystemList() []*PerformanceMonitor_FileSystem {
	if x != nil {
		return x.FileSystemList
	}
	return nil
}

func (x *PerformanceMonitor) GetProcessList() []*PerformanceMonitor_Process {
	if x != nil {
		return x.ProcessList
	}
	return nil
}

func (x *PerformanceMonitor) GetNets() []*PerformanceMonitor_NetWork {
	if x != nil {
		return x.Nets
	}
	return nil
}

func (x *PerformanceMonitor) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *PerformanceMonitor) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PerformanceMonitor) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

type PerformanceMonitor_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalMem   uint64 `protobuf:"varint,1,opt,name=total_mem,json=totalMem,proto3" json:"total_mem,omitempty"`
	UsedMem    uint64 `protobuf:"varint,2,opt,name=used_mem,json=usedMem,proto3" json:"used_mem,omitempty"`
	FreeMem    uint64 `protobuf:"varint,3,opt,name=free_mem,json=freeMem,proto3" json:"free_mem,omitempty"`
	ActualUsed uint64 `protobuf:"varint,4,opt,name=actual_used,json=actualUsed,proto3" json:"actual_used,omitempty"`
	ActualFree uint64 `protobuf:"varint,5,opt,name=actual_free,json=actualFree,proto3" json:"actual_free,omitempty"`
	UsedSwap   uint64 `protobuf:"varint,6,opt,name=used_swap,json=usedSwap,proto3" json:"used_swap,omitempty"`
	FreeSwap   uint64 `protobuf:"varint,7,opt,name=free_swap,json=freeSwap,proto3" json:"free_swap,omitempty"`
	TotalSwap  uint64 `protobuf:"varint,8,opt,name=total_swap,json=totalSwap,proto3" json:"total_swap,omitempty"`
}

func (x *PerformanceMonitor_Memory) Reset() {
	*x = PerformanceMonitor_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_performance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMonitor_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMonitor_Memory) ProtoMessage() {}

func (x *PerformanceMonitor_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMonitor_Memory.ProtoReflect.Descriptor instead.
func (*PerformanceMonitor_Memory) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PerformanceMonitor_Memory) GetTotalMem() uint64 {
	if x != nil {
		return x.TotalMem
	}
	return 0
}

func (x *PerformanceMonitor_Memory) GetUsedMem() uint64 {
	if x != nil {
		return x.UsedMem
	}
	return 0
}

func (x *PerformanceMonitor_Memory) GetFreeMem() uint64 {
	if x != nil {
		return x.FreeMem
	}
	return 0
}

func (x *PerformanceMonitor_Memory) GetActualUsed() uint64 {
	if x != nil {
		return x.ActualUsed
	}
	return 0
}

func (x *PerformanceMonitor_Memory) GetActualFree() uint64 {
	if x != nil {
		return x.ActualFree
	}
	return 0
}

func (x *PerformanceMonitor_Memory) GetUsedSwap() uint64 {
	if x != nil {
		return x.UsedSwap
	}
	return 0
}

func (x *PerformanceMonitor_Memory) GetFreeSwap() uint64 {
	if x != nil {
		return x.FreeSwap
	}
	return 0
}

func (x *PerformanceMonitor_Memory) GetTotalSwap() uint64 {
	if x != nil {
		return x.TotalSwap
	}
	return 0
}

type PerformanceMonitor_Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    uint64 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Nice    uint64 `protobuf:"varint,2,opt,name=nice,proto3" json:"nice,omitempty"`
	Sys     uint64 `protobuf:"varint,3,opt,name=sys,proto3" json:"sys,omitempty"`
	Idle    uint64 `protobuf:"varint,4,opt,name=idle,proto3" json:"idle,omitempty"`
	Wait    uint64 `protobuf:"varint,5,opt,name=wait,proto3" json:"wait,omitempty"`
	Irq     uint64 `protobuf:"varint,6,opt,name=irq,proto3" json:"irq,omitempty"`
	SoftIrq uint64 `protobuf:"varint,7,opt,name=soft_irq,json=softIrq,proto3" json:"soft_irq,omitempty"`
	Stolen  uint64 `protobuf:"varint,8,opt,name=stolen,proto3" json:"stolen,omitempty"`
}

func (x *PerformanceMonitor_Cpu) Reset() {
	*x = PerformanceMonitor_Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_performance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMonitor_Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMonitor_Cpu) ProtoMessage() {}

func (x *PerformanceMonitor_Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMonitor_Cpu.ProtoReflect.Descriptor instead.
func (*PerformanceMonitor_Cpu) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PerformanceMonitor_Cpu) GetUser() uint64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *PerformanceMonitor_Cpu) GetNice() uint64 {
	if x != nil {
		return x.Nice
	}
	return 0
}

func (x *PerformanceMonitor_Cpu) GetSys() uint64 {
	if x != nil {
		return x.Sys
	}
	return 0
}

func (x *PerformanceMonitor_Cpu) GetIdle() uint64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

func (x *PerformanceMonitor_Cpu) GetWait() uint64 {
	if x != nil {
		return x.Wait
	}
	return 0
}

func (x *PerformanceMonitor_Cpu) GetIrq() uint64 {
	if x != nil {
		return x.Irq
	}
	return 0
}

func (x *PerformanceMonitor_Cpu) GetSoftIrq() uint64 {
	if x != nil {
		return x.SoftIrq
	}
	return 0
}

func (x *PerformanceMonitor_Cpu) GetStolen() uint64 {
	if x != nil {
		return x.Stolen
	}
	return 0
}

type PerformanceMonitor_Load struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One     float64 `protobuf:"fixed64,1,opt,name=one,proto3" json:"one,omitempty"`
	Five    float64 `protobuf:"fixed64,2,opt,name=five,proto3" json:"five,omitempty"`
	Fifteen float64 `protobuf:"fixed64,3,opt,name=fifteen,proto3" json:"fifteen,omitempty"`
}

func (x *PerformanceMonitor_Load) Reset() {
	*x = PerformanceMonitor_Load{}
	if protoimpl.UnsafeEnabled {
		mi := &file_performance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMonitor_Load) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMonitor_Load) ProtoMessage() {}

func (x *PerformanceMonitor_Load) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMonitor_Load.ProtoReflect.Descriptor instead.
func (*PerformanceMonitor_Load) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PerformanceMonitor_Load) GetOne() float64 {
	if x != nil {
		return x.One
	}
	return 0
}

func (x *PerformanceMonitor_Load) GetFive() float64 {
	if x != nil {
		return x.Five
	}
	return 0
}

func (x *PerformanceMonitor_Load) GetFifteen() float64 {
	if x != nil {
		return x.Fifteen
	}
	return 0
}

type PerformanceMonitor_FileSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirName     string `protobuf:"bytes,1,opt,name=dir_name,json=dirName,proto3" json:"dir_name,omitempty"`
	DevName     string `protobuf:"bytes,2,opt,name=dev_name,json=devName,proto3" json:"dev_name,omitempty"`
	TypeName    string `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	SysTypeName string `protobuf:"bytes,4,opt,name=sys_type_name,json=sysTypeName,proto3" json:"sys_type_name,omitempty"`
	Options     string `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	Flags       uint32 `protobuf:"varint,6,opt,name=flags,proto3" json:"flags,omitempty"`
	Total       uint64 `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`
	Used        uint64 `protobuf:"varint,8,opt,name=used,proto3" json:"used,omitempty"`
	Free        uint64 `protobuf:"varint,9,opt,name=free,proto3" json:"free,omitempty"`
	Avail       uint64 `protobuf:"varint,10,opt,name=avail,proto3" json:"avail,omitempty"`
	Files       uint64 `protobuf:"varint,11,opt,name=files,proto3" json:"files,omitempty"`
	FreeFiles   uint64 `protobuf:"varint,12,opt,name=free_files,json=freeFiles,proto3" json:"free_files,omitempty"`
}

func (x *PerformanceMonitor_FileSystem) Reset() {
	*x = PerformanceMonitor_FileSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_performance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMonitor_FileSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMonitor_FileSystem) ProtoMessage() {}

func (x *PerformanceMonitor_FileSystem) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMonitor_FileSystem.ProtoReflect.Descriptor instead.
func (*PerformanceMonitor_FileSystem) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PerformanceMonitor_FileSystem) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

func (x *PerformanceMonitor_FileSystem) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *PerformanceMonitor_FileSystem) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *PerformanceMonitor_FileSystem) GetSysTypeName() string {
	if x != nil {
		return x.SysTypeName
	}
	return ""
}

func (x *PerformanceMonitor_FileSystem) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *PerformanceMonitor_FileSystem) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *PerformanceMonitor_FileSystem) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PerformanceMonitor_FileSystem) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *PerformanceMonitor_FileSystem) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *PerformanceMonitor_FileSystem) GetAvail() uint64 {
	if x != nil {
		return x.Avail
	}
	return 0
}

func (x *PerformanceMonitor_FileSystem) GetFiles() uint64 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *PerformanceMonitor_FileSystem) GetFreeFiles() uint64 {
	if x != nil {
		return x.FreeFiles
	}
	return 0
}

type PerformanceMonitor_ProcTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime uint64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	User      uint64 `protobuf:"varint,2,opt,name=user,proto3" json:"user,omitempty"`
	Sys       uint64 `protobuf:"varint,3,opt,name=sys,proto3" json:"sys,omitempty"`
	Total     uint64 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PerformanceMonitor_ProcTime) Reset() {
	*x = PerformanceMonitor_ProcTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_performance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMonitor_ProcTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMonitor_ProcTime) ProtoMessage() {}

func (x *PerformanceMonitor_ProcTime) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMonitor_ProcTime.ProtoReflect.Descriptor instead.
func (*PerformanceMonitor_ProcTime) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PerformanceMonitor_ProcTime) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PerformanceMonitor_ProcTime) GetUser() uint64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *PerformanceMonitor_ProcTime) GetSys() uint64 {
	if x != nil {
		return x.Sys
	}
	return 0
}

func (x *PerformanceMonitor_ProcTime) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PerformanceMonitor_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid            int32                        `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Args           []string                     `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	ExeName        string                       `protobuf:"bytes,3,opt,name=exe_name,json=exeName,proto3" json:"exe_name,omitempty"`
	ExeCwd         string                       `protobuf:"bytes,4,opt,name=exe_cwd,json=exeCwd,proto3" json:"exe_cwd,omitempty"`
	ExeRoot        string                       `protobuf:"bytes,5,opt,name=exe_root,json=exeRoot,proto3" json:"exe_root,omitempty"`
	CpuProcTime    *PerformanceMonitor_ProcTime `protobuf:"bytes,6,opt,name=cpu_proc_time,json=cpuProcTime,proto3" json:"cpu_proc_time,omitempty"`
	CpuLastTime    uint64                       `protobuf:"varint,7,opt,name=cpu_last_time,json=cpuLastTime,proto3" json:"cpu_last_time,omitempty"`
	CpuPercent     float64                      `protobuf:"fixed64,8,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	MemSize        uint64                       `protobuf:"varint,9,opt,name=mem_size,json=memSize,proto3" json:"mem_size,omitempty"`
	MemResident    uint64                       `protobuf:"varint,10,opt,name=mem_resident,json=memResident,proto3" json:"mem_resident,omitempty"`
	MemShare       uint64                       `protobuf:"varint,11,opt,name=mem_share,json=memShare,proto3" json:"mem_share,omitempty"`
	MemMinorFaults uint64                       `protobuf:"varint,12,opt,name=mem_minor_faults,json=memMinorFaults,proto3" json:"mem_minor_faults,omitempty"`
	MemMajorFaults uint64                       `protobuf:"varint,13,opt,name=mem_major_faults,json=memMajorFaults,proto3" json:"mem_major_faults,omitempty"`
	MemPageFaults  uint64                       `protobuf:"varint,14,opt,name=mem_page_faults,json=memPageFaults,proto3" json:"mem_page_faults,omitempty"`
	StatName       string                       `protobuf:"bytes,15,opt,name=stat_name,json=statName,proto3" json:"stat_name,omitempty"`
	StatState      int32                        `protobuf:"varint,16,opt,name=stat_state,json=statState,proto3" json:"stat_state,omitempty"`
	StatPpid       int32                        `protobuf:"varint,17,opt,name=stat_ppid,json=statPpid,proto3" json:"stat_ppid,omitempty"`
	StatTty        int32                        `protobuf:"varint,18,opt,name=stat_tty,json=statTty,proto3" json:"stat_tty,omitempty"`
	StatPriority   int32                        `protobuf:"varint,19,opt,name=stat_priority,json=statPriority,proto3" json:"stat_priority,omitempty"`
	StatNice       int32                        `protobuf:"varint,20,opt,name=stat_nice,json=statNice,proto3" json:"stat_nice,omitempty"`
	StatProcessor  int32                        `protobuf:"varint,21,opt,name=stat_processor,json=statProcessor,proto3" json:"stat_processor,omitempty"`
}

func (x *PerformanceMonitor_Process) Reset() {
	*x = PerformanceMonitor_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_performance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMonitor_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMonitor_Process) ProtoMessage() {}

func (x *PerformanceMonitor_Process) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMonitor_Process.ProtoReflect.Descriptor instead.
func (*PerformanceMonitor_Process) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PerformanceMonitor_Process) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PerformanceMonitor_Process) GetExeName() string {
	if x != nil {
		return x.ExeName
	}
	return ""
}

func (x *PerformanceMonitor_Process) GetExeCwd() string {
	if x != nil {
		return x.ExeCwd
	}
	return ""
}

func (x *PerformanceMonitor_Process) GetExeRoot() string {
	if x != nil {
		return x.ExeRoot
	}
	return ""
}

func (x *PerformanceMonitor_Process) GetCpuProcTime() *PerformanceMonitor_ProcTime {
	if x != nil {
		return x.CpuProcTime
	}
	return nil
}

func (x *PerformanceMonitor_Process) GetCpuLastTime() uint64 {
	if x != nil {
		return x.CpuLastTime
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetCpuPercent() float64 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetMemSize() uint64 {
	if x != nil {
		return x.MemSize
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetMemResident() uint64 {
	if x != nil {
		return x.MemResident
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetMemShare() uint64 {
	if x != nil {
		return x.MemShare
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetMemMinorFaults() uint64 {
	if x != nil {
		return x.MemMinorFaults
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetMemMajorFaults() uint64 {
	if x != nil {
		return x.MemMajorFaults
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetMemPageFaults() uint64 {
	if x != nil {
		return x.MemPageFaults
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetStatName() string {
	if x != nil {
		return x.StatName
	}
	return ""
}

func (x *PerformanceMonitor_Process) GetStatState() int32 {
	if x != nil {
		return x.StatState
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetStatPpid() int32 {
	if x != nil {
		return x.StatPpid
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetStatTty() int32 {
	if x != nil {
		return x.StatTty
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetStatPriority() int32 {
	if x != nil {
		return x.StatPriority
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetStatNice() int32 {
	if x != nil {
		return x.StatNice
	}
	return 0
}

func (x *PerformanceMonitor_Process) GetStatProcessor() int32 {
	if x != nil {
		return x.StatProcessor
	}
	return 0
}

type PerformanceMonitor_NetWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip                string  `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Speed             float64 `protobuf:"fixed64,3,opt,name=speed,proto3" json:"speed,omitempty"`
	OutRecvPkgErrRate float64 `protobuf:"fixed64,4,opt,name=out_recv_pkg_err_rate,json=outRecvPkgErrRate,proto3" json:"out_recv_pkg_err_rate,omitempty"` //外网收包错误率
	OutSendPkgErrRate float64 `protobuf:"fixed64,5,opt,name=out_send_pkg_err_rate,json=outSendPkgErrRate,proto3" json:"out_send_pkg_err_rate,omitempty"` //外网发包错误率
	RecvByte          uint64  `protobuf:"varint,6,opt,name=recv_byte,json=recvByte,proto3" json:"recv_byte,omitempty"`                                   //接收的字节数
	RecvPkg           uint64  `protobuf:"varint,7,opt,name=recv_pkg,json=recvPkg,proto3" json:"recv_pkg,omitempty"`                                      //接收正确的包数
	RecvErr           uint64  `protobuf:"varint,8,opt,name=recv_err,json=recvErr,proto3" json:"recv_err,omitempty"`                                      //接收错误的包数
	SendByte          uint64  `protobuf:"varint,9,opt,name=send_byte,json=sendByte,proto3" json:"send_byte,omitempty"`                                   //发送的字节数
	SendPkg           uint64  `protobuf:"varint,10,opt,name=send_pkg,json=sendPkg,proto3" json:"send_pkg,omitempty"`                                     //发送正确的包数
	SendErr           uint64  `protobuf:"varint,11,opt,name=send_err,json=sendErr,proto3" json:"send_err,omitempty"`                                     //发送错误的包数
	RecvByteAvg       float64 `protobuf:"fixed64,12,opt,name=recv_byte_avg,json=recvByteAvg,proto3" json:"recv_byte_avg,omitempty"`                      //一个周期平均每秒接收字节数
	SendByteAvg       float64 `protobuf:"fixed64,13,opt,name=send_byte_avg,json=sendByteAvg,proto3" json:"send_byte_avg,omitempty"`                      //一个周期平均每秒发送字节数
	RecvErrRate       float64 `protobuf:"fixed64,14,opt,name=recv_err_rate,json=recvErrRate,proto3" json:"recv_err_rate,omitempty"`                      //一个周期收包错误率
	SendErrRate       float64 `protobuf:"fixed64,15,opt,name=send_err_rate,json=sendErrRate,proto3" json:"send_err_rate,omitempty"`                      //一个周期发包错误率
	RecvPkgAvg        float64 `protobuf:"fixed64,16,opt,name=recv_pkg_avg,json=recvPkgAvg,proto3" json:"recv_pkg_avg,omitempty"`                         //一个周期平均每秒收包数
	SendPkgAvg        float64 `protobuf:"fixed64,17,opt,name=send_pkg_avg,json=sendPkgAvg,proto3" json:"send_pkg_avg,omitempty"`                         //一个周期平均每秒发包数
}

func (x *PerformanceMonitor_NetWork) Reset() {
	*x = PerformanceMonitor_NetWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_performance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMonitor_NetWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMonitor_NetWork) ProtoMessage() {}

func (x *PerformanceMonitor_NetWork) ProtoReflect() protoreflect.Message {
	mi := &file_performance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMonitor_NetWork.ProtoReflect.Descriptor instead.
func (*PerformanceMonitor_NetWork) Descriptor() ([]byte, []int) {
	return file_performance_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PerformanceMonitor_NetWork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerformanceMonitor_NetWork) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PerformanceMonitor_NetWork) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetOutRecvPkgErrRate() float64 {
	if x != nil {
		return x.OutRecvPkgErrRate
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetOutSendPkgErrRate() float64 {
	if x != nil {
		return x.OutSendPkgErrRate
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetRecvByte() uint64 {
	if x != nil {
		return x.RecvByte
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetRecvPkg() uint64 {
	if x != nil {
		return x.RecvPkg
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetRecvErr() uint64 {
	if x != nil {
		return x.RecvErr
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetSendByte() uint64 {
	if x != nil {
		return x.SendByte
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetSendPkg() uint64 {
	if x != nil {
		return x.SendPkg
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetSendErr() uint64 {
	if x != nil {
		return x.SendErr
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetRecvByteAvg() float64 {
	if x != nil {
		return x.RecvByteAvg
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetSendByteAvg() float64 {
	if x != nil {
		return x.SendByteAvg
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetRecvErrRate() float64 {
	if x != nil {
		return x.RecvErrRate
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetSendErrRate() float64 {
	if x != nil {
		return x.SendErrRate
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetRecvPkgAvg() float64 {
	if x != nil {
		return x.RecvPkgAvg
	}
	return 0
}

func (x *PerformanceMonitor_NetWork) GetSendPkgAvg() float64 {
	if x != nil {
		return x.SendPkgAvg
	}
	return 0
}

var File_performance_proto protoreflect.FileDescriptor

var file_performance_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xa5, 0x15, 0x0a, 0x12, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x32, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x03,
	0x6d, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x70, 0x75, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x70, 0x75,
	0x52, 0x07, 0x63, 0x70, 0x75, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x04, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x1a, 0xf6, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x65,
	0x65, 0x4d, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x77, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x53,
	0x77, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x1a,
	0xac, 0x01, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x79,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x71,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x6f, 0x66, 0x74, 0x5f, 0x69, 0x72, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x6f, 0x66, 0x74, 0x49, 0x72, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x1a, 0x46,
	0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x66, 0x74, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66,
	0x69, 0x66, 0x74, 0x65, 0x65, 0x6e, 0x1a, 0xbc, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x79, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xbf, 0x05, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x78, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x78, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x65,
	0x5f, 0x63, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65, 0x43,
	0x77, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x46, 0x0a,
	0x0d, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x50, 0x72, 0x6f,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x70,
	0x75, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65,
	0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6d, 0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x70, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x50, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x74, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x54, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x1a, 0xa1,
	0x04, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x70, 0x6b, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x63, 0x76, 0x50, 0x6b, 0x67, 0x45,
	0x72, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6b, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6b,
	0x67, 0x45, 0x72, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x76, 0x42, 0x79, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x70, 0x6b,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x63, 0x76, 0x50, 0x6b, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x63, 0x76, 0x45, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x6b, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64,
	0x50, 0x6b, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x76, 0x42, 0x79, 0x74, 0x65, 0x41,
	0x76, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x61, 0x76, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x41, 0x76, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x65,
	0x72, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x76, 0x45, 0x72, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x70, 0x6b, 0x67, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x50, 0x6b, 0x67, 0x41, 0x76, 0x67,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6b, 0x67, 0x5f, 0x61, 0x76, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x6b, 0x67, 0x41,
	0x76, 0x67, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_performance_proto_rawDescOnce sync.Once
	file_performance_proto_rawDescData = file_performance_proto_rawDesc
)

func file_performance_proto_rawDescGZIP() []byte {
	file_performance_proto_rawDescOnce.Do(func() {
		file_performance_proto_rawDescData = protoimpl.X.CompressGZIP(file_performance_proto_rawDescData)
	})
	return file_performance_proto_rawDescData
}

var file_performance_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_performance_proto_goTypes = []interface{}{
	(*PerformanceMonitor)(nil),            // 0: model.PerformanceMonitor
	(*PerformanceMonitor_Memory)(nil),     // 1: model.PerformanceMonitor.Memory
	(*PerformanceMonitor_Cpu)(nil),        // 2: model.PerformanceMonitor.Cpu
	(*PerformanceMonitor_Load)(nil),       // 3: model.PerformanceMonitor.Load
	(*PerformanceMonitor_FileSystem)(nil), // 4: model.PerformanceMonitor.FileSystem
	(*PerformanceMonitor_ProcTime)(nil),   // 5: model.PerformanceMonitor.ProcTime
	(*PerformanceMonitor_Process)(nil),    // 6: model.PerformanceMonitor.Process
	(*PerformanceMonitor_NetWork)(nil),    // 7: model.PerformanceMonitor.NetWork
}
var file_performance_proto_depIdxs = []int32{
	1, // 0: model.PerformanceMonitor.mem:type_name -> model.PerformanceMonitor.Memory
	2, // 1: model.PerformanceMonitor.cpu:type_name -> model.PerformanceMonitor.Cpu
	3, // 2: model.PerformanceMonitor.load:type_name -> model.PerformanceMonitor.Load
	2, // 3: model.PerformanceMonitor.cpulist:type_name -> model.PerformanceMonitor.Cpu
	4, // 4: model.PerformanceMonitor.file_system_list:type_name -> model.PerformanceMonitor.FileSystem
	6, // 5: model.PerformanceMonitor.process_list:type_name -> model.PerformanceMonitor.Process
	7, // 6: model.PerformanceMonitor.nets:type_name -> model.PerformanceMonitor.NetWork
	5, // 7: model.PerformanceMonitor.Process.cpu_proc_time:type_name -> model.PerformanceMonitor.ProcTime
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_performance_proto_init() }
func file_performance_proto_init() {
	if File_performance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_performance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_performance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMonitor_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_performance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMonitor_Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_performance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMonitor_Load); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_performance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMonitor_FileSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_performance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMonitor_ProcTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_performance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMonitor_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_performance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMonitor_NetWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_performance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_performance_proto_goTypes,
		DependencyIndexes: file_performance_proto_depIdxs,
		MessageInfos:      file_performance_proto_msgTypes,
	}.Build()
	File_performance_proto = out.File
	file_performance_proto_rawDesc = nil
	file_performance_proto_goTypes = nil
	file_performance_proto_depIdxs = nil
}
